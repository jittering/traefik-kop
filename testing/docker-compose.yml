services:
  # Redis for use in testing, if we don't have one available locally
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - 6380:6379

  # Service with two routers+services listening on different ports.
  helloworld:
    build:
      dockerfile: ./helloworld/Dockerfile
      context: ./
    restart: unless-stopped
    ports:
      - 5555:5555
      - 5566:5566
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hello1.rule=Host(`hello1.local`)"
      - "traefik.http.routers.hello1.service=hello1"
      - "traefik.http.routers.hello1.tls=true"
      - "traefik.http.routers.hello1.tls.certresolver=default"
      - "traefik.http.services.hello1.loadbalancer.server.scheme=http"
      - "traefik.http.services.hello1.loadbalancer.server.port=5555"
      - "traefik.http.routers.hello2.rule=Host(`hello2.local`)"
      - "traefik.http.routers.hello2.service=hello2"
      - "traefik.http.routers.hello2.tls=true"
      - "traefik.http.routers.hello2.tls.certresolver=default"
      - "traefik.http.services.hello2.loadbalancer.server.scheme=http"
      - "traefik.http.services.hello2.loadbalancer.server.port=5566"

  # This service is the same as above except that it does not have a label
  # which explicitly maps the port and so it fails to correctly determine which
  # port to tell traefik to connect to. i.e., both services connect to 5555.
  #
  # This scenario will *not* be handled correctly by traefik-kop as we have no
  # fallback way to determine the port.
  hellodetect:
    build:
      dockerfile: ./helloworld/Dockerfile
      context: ./
    restart: unless-stopped
    ports:
      - 5577:5555
      - 5588:5566
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hello-detect.rule=Host(`hello-detect.local`)"
      - "traefik.http.routers.hello-detect.service=hello-detect"
      - "traefik.http.routers.hello-detect.tls=true"
      - "traefik.http.routers.hello-detect.tls.certresolver=default"
      - "traefik.http.services.hello-detect.loadbalancer.server.scheme=http"
      - "traefik.http.routers.hello-detect2.rule=Host(`hello-detect2.local`)"
      - "traefik.http.routers.hello-detect2.service=hello-detect2"
      - "traefik.http.routers.hello-detect2.tls=true"
      - "traefik.http.routers.hello-detect2.tls.certresolver=default"
      - "traefik.http.services.hello-detect2.loadbalancer.server.scheme=http"

  # Hello service with IP bind override
  helloip:
    build:
      dockerfile: ./helloworld/Dockerfile
      context: ./
    restart: unless-stopped
    ports:
      - 5599:5555
    labels:
      # - "kop.bind.ip=6.6.6.6"
      - "kop.helloip.bind.ip=4.4.4.4"
      - "traefik.enable=true"
      - "traefik.http.routers.helloip.rule=Host(`helloip.local`)"
      - "traefik.http.routers.helloip.service=helloip"
      - "traefik.http.routers.helloip.tls=true"
      - "traefik.http.routers.helloip.tls.certresolver=default"
      - "traefik.http.services.helloip.loadbalancer.server.scheme=http"
      - "traefik.http.services.helloip.loadbalancer.server.port=5599"

  # Test case for #52 (typo in port label, uppercase 'B')
  hellotcp:
    build:
      dockerfile: ./helloworld/Dockerfile
      context: ./
    restart: unless-stopped
    ports:
      - 5555:5555
      - 5566:5566
      - 5577:5577
    labels:
      # Web server
      - traefik.enable=true
      - traefik.http.routers.gitlab-web.entrypoints=websecure
      - traefik.http.routers.gitlab-web.rule=Host("gitlab.example.com")
      - traefik.http.routers.gitlab-web.service=gitlab-web
      - traefik.http.services.gitlab-web.loadbalancer.server.port=80
      # Registry server
      - traefik.http.routers.gitlab-registry.entrypoints=websecure
      - traefik.http.routers.gitlab-registry.rule=Host("registry.example.com")
      - traefik.http.routers.gitlab-registry.service=gitlab-registry
      - traefik.http.services.gitlab-registry.loadbalancer.server.port=5005
      # SSH host for git repository access
      - traefik.tcp.routers.gitlab-ssh.rule=HostSNI("*")
      - traefik.tcp.routers.gitlab-ssh.entrypoints=ssh-gitlab
      - traefik.tcp.routers.gitlab-ssh.service=gitlab-ssh
      - traefik.tcp.services.gitlab-ssh.loadBalancer.server.port=22

  # Basic nginx with a simple healthcheck
  nginx:
    image: "nginx:alpine"
    restart: unless-stopped
    ports:
      - 8088:80
    healthcheck:
      test: ["CMD", "curl", "-s", "localhost:80"]
      timeout: 10s
      interval: 2s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.local`)"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=default"
      - "traefik.http.services.nginx.loadbalancer.server.scheme=http"
      - "traefik.http.services.nginx.loadbalancer.server.port=8088"

  # Pihole to test a specific bug report
  pihole:
    image: "pihole/pihole:latest"
    restart: unless-stopped
    ports:
      - 8089:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.local`)"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.routers.pihole.tls.certresolver=default"
      - "traefik.http.services.pihole.loadbalancer.server.scheme=http"
      - "traefik.http.services.pihole.loadbalancer.server.port=8089"

  gitea:
    image: gitea/gitea
    labels:
      traefik.enable: true
      # http
      traefik.http.routers.gitea.rule: "Host(`git.domain`)"
      traefik.http.routers.gitea.entrypoints: webs
      traefik.http.routers.gitea.service: gitea@redis
      traefik.http.services.gitea.loadbalancer.server.port: 20080
      # tcp
      traefik.tcp.routers.gitea-ssh.rule: "HostSNI(`*`)"
      traefik.tcp.routers.gitea-ssh.entrypoints: ssh
      traefik.tcp.routers.gitea-ssh.service: gitea-ssh@redis
      traefik.tcp.services.gitea-ssh.loadbalancer.server.port: 20022

  ephemeral:
    image: "nginx:alpine"
    restart: "no"
    ports:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ephemeral.rule=Host(`ephemeral.local`)"
      - "traefik.http.routers.ephemeral.tls=true"
      - "traefik.http.routers.ephemeral.tls.certresolver=default"
      # not explicitly set, let kop figure it out
      # - "traefik.http.services.ephemeral.loadbalancer.server.scheme=http"
      # - "traefik.http.services.ephemeral.loadbalancer.server.port=8099"
